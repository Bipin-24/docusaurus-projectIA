{
    "swagger" : "2.0",
    "info" : {
      "version" : "3.3.0-47",
      "title" : "Job Configuration"
    },
    "host" : "api.im.actiandatacloud.com",
    "basePath" : "/v2/api",
    "tags" : [ {
      "name" : "@Login"
    }, {
      "name" : "Job Config"
    }, {
      "name" : "Job Config Bulk APIs"
    }, {
      "name" : "Job Config Files"
    }, {
      "name" : "Job Config Macros"
    }, {
      "name" : "Job Config Macrosets"
    }, {
      "name" : "Job Config Scheduling"
    }, {
      "name" : "Job Config Tags"
    }, {
      "name" : "Job Configuration"
    }, {
      "name" : "Job Template"
    }, {
      "name" : "Job Template Files"
    }, {
      "name" : "Job Template Macros"
    }, {
      "name" : "Job Templates Bulk APIs"
    } ],
    "schemes" : [ "https" ],
    "paths" : {
      "/jobconfigs" : {
        "get" : {
          "tags" : [ "Job Config" ],
          "summary" : "Get a List of Job Configs",
          "description" : "",
          "operationId" : "getJobConfigs",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "onlyfavs",
            "in" : "query",
            "description" : "Show all or only favorite Job Configs",
            "required" : false,
            "type" : "boolean",
            "default" : false
          }, {
            "name" : "active",
            "in" : "query",
            "description" : "Boolean to determine if Active or Inactive job configurations should be returned.",
            "required" : false,
            "type" : "boolean"
          }, {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "permissions",
            "in" : "query",
            "description" : "Set to true to include current user's permissions for each object in response",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/JobConfigListResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "post" : {
          "tags" : [ "Job Config" ],
          "summary" : "Create a new Job Config",
          "description" : "",
          "operationId" : "createJobConfig",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/JobConfigRequest"
            }
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/JobConfigResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/activate" : {
        "patch" : {
          "tags" : [ "Job Config Bulk APIs" ],
          "summary" : "Bulk Activation for jobconfig id.",
          "description" : "",
          "operationId" : "bulkActivateJobConfigs",
          "consumes" : [ "application/json" ],
          "parameters" : [ {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/BulkOperation"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/deactivate" : {
        "patch" : {
          "tags" : [ "Job Config Bulk APIs" ],
          "summary" : "Bulk De-Activation for jobconfig id.",
          "description" : "",
          "operationId" : "bulkDeactivateJobConfigs",
          "consumes" : [ "application/json" ],
          "parameters" : [ {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/BulkOperation"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/delete" : {
        "delete" : {
          "tags" : [ "Job Config Bulk APIs" ],
          "summary" : "Bulk delete for jobconfig id.",
          "description" : "",
          "operationId" : "bulkDeleteJobConfigs",
          "consumes" : [ "application/json" ],
          "parameters" : [ {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/BulkOperation"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/dropdown" : {
        "get" : {
          "tags" : [ "Job Configuration" ],
          "summary" : "List JobConfigs Dropdown",
          "description" : "",
          "operationId" : "getJobConfigsDropDown",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/DropDownListResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/favorites" : {
        "post" : {
          "tags" : [ "Job Config Bulk APIs" ],
          "summary" : "Set the jobconfig as an user favorite.",
          "description" : "",
          "operationId" : "bulkCreateJobConfigFavorites",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/BulkOperation"
            }
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/FavoriteResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "delete" : {
          "tags" : [ "Job Config Bulk APIs" ],
          "summary" : "Unsets the jobconfig as an user favorite",
          "description" : "",
          "operationId" : "bulkDeleteJobConfigFavorites",
          "parameters" : [ {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/BulkOperation"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/import" : {
        "post" : {
          "tags" : [ "Job Config" ],
          "summary" : "Import a JobConfig.",
          "description" : "JobConfig metadata, macros, and files are imported from a zip file.",
          "operationId" : "importJobConfig",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "file",
            "in" : "formData",
            "description" : "Zip file content",
            "required" : true,
            "type" : "file"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/JobConfigResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/package" : {
        "post" : {
          "tags" : [ "Job Config" ],
          "summary" : "Create a new Job Config from a djar package",
          "description" : "Upload a djar package, set an entrypoint by providing rtc or entrypoint to the job config. If no rtc or entrypoint is provided, an entrypoint is set by default.",
          "operationId" : "createJobConfigFromPackage",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "name",
            "in" : "query",
            "description" : "Job Config Name",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "entrypoint",
            "in" : "query",
            "description" : "Package Entry Point",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "integid",
            "in" : "query",
            "description" : "Integration Design Project Id",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "profileid",
            "in" : "query",
            "description" : "Profile ID",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "active",
            "in" : "query",
            "description" : "Activate At Create",
            "required" : false,
            "type" : "boolean"
          }, {
            "name" : "file",
            "in" : "formData",
            "description" : "Package File / Integration Spec",
            "required" : true,
            "type" : "file"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/JobConfigResponse"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}" : {
        "get" : {
          "tags" : [ "Job Config" ],
          "summary" : "Get a Job Config",
          "description" : "",
          "operationId" : "getJobConfig",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/JobConfigResponse"
              }
            },
            "401" : {
              "description" : "unathorized"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "put" : {
          "tags" : [ "Job Config" ],
          "summary" : "Update an existing Job Config",
          "description" : "",
          "operationId" : "updateJobConfig",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/JobConfigRequest"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/JobConfigResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "delete" : {
          "tags" : [ "Job Config" ],
          "summary" : "Delete a Job Config",
          "description" : "",
          "operationId" : "deleteJobConfig",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "patch" : {
          "tags" : [ "Job Config" ],
          "summary" : "Patch an existing Job Config",
          "description" : "",
          "operationId" : "patchJobConfig",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/JobConfigRequest"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/JobConfigResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/clone" : {
        "post" : {
          "tags" : [ "Job Config" ],
          "summary" : "Clone a Job Config",
          "description" : "",
          "operationId" : "cloneJobConfig",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "name",
            "in" : "query",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/JobConfigResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Not Found"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/export" : {
        "post" : {
          "tags" : [ "Job Config" ],
          "summary" : "Export a JobConfig.",
          "description" : "JobConfig metadata, macros, and files are exported as a zip file. Where applicable, JobTemplate metadata, macros, and files are included. Account and User metadata and linked Public and Private files are excluded. Secure macros are exported as key only.",
          "operationId" : "exportJobConfig",
          "produces" : [ "application/octet-stream" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "query",
            "description" : "id",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/StreamingResponseBody"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "404" : {
              "description" : "Not Found"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/favorites" : {
        "post" : {
          "tags" : [ "Job Config" ],
          "summary" : "Sets the job config as a user favorite.",
          "description" : "",
          "operationId" : "createJobConfigFavorite",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/FavoriteResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "delete" : {
          "tags" : [ "Job Config" ],
          "summary" : "Unsets the job config as a user favorite",
          "description" : "",
          "operationId" : "deleteJobConfigFavorite",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/filelinks" : {
        "post" : {
          "tags" : [ "Job Config Files" ],
          "summary" : "Create JobConfig File Link",
          "description" : "",
          "operationId" : "createJobConfigFileLink",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/FileLinkRequest"
            }
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/FileResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "409" : {
              "description" : "Conflict"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/filelinks/{linkid}" : {
        "delete" : {
          "tags" : [ "Job Config Files" ],
          "summary" : "Delete Jobconfig File Link",
          "description" : "",
          "operationId" : "deleteJobConfigFileLink",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "linkId",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "format" : "int64"
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/files" : {
        "get" : {
          "tags" : [ "Job Config Files" ],
          "summary" : "List the Files on the Job Config",
          "description" : "",
          "operationId" : "listJobConfigFiles",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/FileListResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "post" : {
          "tags" : [ "Job Config Files" ],
          "summary" : "Create a new File on the Job Config",
          "description" : "Request body contents will be saved to the file contents. ",
          "operationId" : "createJobConfigFile",
          "consumes" : [ "application/octet-stream" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Configuration Id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "key",
            "in" : "query",
            "description" : "key",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/FileResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/files/entrypoints/{key+}" : {
        "get" : {
          "tags" : [ "Job Config Files" ],
          "summary" : "Retrieve the Entry Points defined inside ANY package attached to a Job Config",
          "description" : "",
          "operationId" : "getJobConfigFileEntryPoints",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "key",
            "in" : "path",
            "description" : "Name of the file.",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/EntryPoints"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Not Found"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/files/{key}" : {
        "get" : {
          "tags" : [ "Job Config Files" ],
          "summary" : "Retrieve a Job Config File",
          "description" : "",
          "operationId" : "getJobConfigFile",
          "produces" : [ "application/octet-stream" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "key",
            "in" : "path",
            "description" : "file name",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "put" : {
          "tags" : [ "Job Config Files" ],
          "summary" : "Update a Job Config File",
          "description" : "Request body contents will be saved to the file contents. ",
          "operationId" : "updateJobConfigFile",
          "consumes" : [ "application/octet-stream" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Configuration Id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "key",
            "in" : "path",
            "description" : "file name",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/FileResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "delete" : {
          "tags" : [ "Job Config Files" ],
          "summary" : "Delete a Job Config File",
          "description" : "",
          "operationId" : "deleteJobConfigFile",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Configuration Id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "key",
            "in" : "path",
            "description" : "file name",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/macrodef" : {
        "post" : {
          "tags" : [ "Job Config Macros" ],
          "summary" : "Import distinct Macros from MacroDef file to Job Config",
          "description" : "Macro value is only returned if the macro is not marked as secure. Secure macros can only be updated if update is secure.",
          "operationId" : "importJobConfigMacroDef",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "file",
            "in" : "formData",
            "description" : "MacroDef file, Json or Xml",
            "required" : true,
            "type" : "file"
          }, {
            "name" : "replace",
            "in" : "query",
            "required" : false,
            "type" : "boolean"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/MacroListResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "500" : {
              "description" : "server exception"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/macros" : {
        "get" : {
          "tags" : [ "Job Config Macros" ],
          "summary" : "List the Macros on the Job Config",
          "description" : "Macro value is only returned if the macro is not marked as secure. ",
          "operationId" : "listJobConfigMacros",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/MacroListResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "post" : {
          "tags" : [ "Job Config Macros" ],
          "summary" : "Create a Job Config Macro",
          "description" : "Macro value is only returned if the macro is not marked as secure. Secure macros can only be updated if update is secure.",
          "operationId" : "createJobConfigMacro",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/MacroRequest"
            }
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/MacroResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/macros/{name}" : {
        "get" : {
          "tags" : [ "Job Config Macros" ],
          "summary" : "Get a Job Config Macro",
          "description" : "Macro value is only returned if the macro is not marked as secure. ",
          "operationId" : "getJobConfigMacro",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/MacroResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "post" : {
          "tags" : [ "Job Config Macros" ],
          "summary" : "Create a Macro on the Job Configuration from a file",
          "description" : "Macro value is only returned if the macro is not marked as secure. ",
          "operationId" : "createJobConfigMacroFromFile",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "file",
            "in" : "formData",
            "description" : "Source File",
            "required" : true,
            "type" : "file"
          }, {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "pattern" : ".+"
          }, {
            "name" : "secure",
            "in" : "query",
            "description" : "Is Macro Secure",
            "required" : true,
            "type" : "boolean"
          }, {
            "name" : "description",
            "in" : "query",
            "description" : "Macro Description",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/MacroResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "409" : {
              "description" : "Conflict"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "put" : {
          "tags" : [ "Job Config Macros" ],
          "summary" : "Update a Job Config Macro",
          "description" : "Macro value is only returned if the macro is not marked as secure. Secure macros can only be updated if update is secure.",
          "operationId" : "updateJobConfigMacro",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/MacroRequest"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/MacroResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "delete" : {
          "tags" : [ "Job Config Macros" ],
          "summary" : "Delete a Job Config Macro",
          "description" : "",
          "operationId" : "deleteJobConfigMacro",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/macrosets" : {
        "get" : {
          "tags" : [ "Job Config Macrosets" ],
          "summary" : "Retrieve the Macrosets linked to the Job Config",
          "description" : "",
          "operationId" : "getJobConfigMacrosets",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/MacroSetListResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Not Found"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/owner" : {
        "put" : {
          "tags" : [ "Job Config" ],
          "summary" : "Assigns new owner to the Config",
          "description" : "",
          "operationId" : "updateJobConfigOwner",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The Config Id",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/Reference"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/JobConfigResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/package/entrypoints" : {
        "get" : {
          "tags" : [ "Job Config" ],
          "summary" : "Retrieve the Entry Points defined inside the SELECTED package on a Job Config",
          "description" : "",
          "operationId" : "getJobConfigEntryPoints",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/EntryPoints"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/schedule" : {
        "get" : {
          "tags" : [ "Job Config Scheduling" ],
          "summary" : "Retrieve a jobconfig schedule",
          "description" : "",
          "operationId" : "getSchedule",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Config Id",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/ScheduleResponse"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "post" : {
          "tags" : [ "Job Config Scheduling" ],
          "summary" : "Create a jobconfig schedule",
          "description" : "",
          "operationId" : "createSchedule",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Config Id",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/ScheduleRequest"
            }
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/ScheduleResponse"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "put" : {
          "tags" : [ "Job Config Scheduling" ],
          "summary" : "Update a jobconfig schedule",
          "description" : "",
          "operationId" : "updateSchedule",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Config Id",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/ScheduleRequest"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/ScheduleResponse"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "delete" : {
          "tags" : [ "Job Config Scheduling" ],
          "summary" : "Delete a jobconfig schedule",
          "description" : "",
          "operationId" : "deleteSchedule",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Config Id",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content",
              "schema" : {
                "type" : "object"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/subscription" : {
        "post" : {
          "tags" : [ "Job Config" ],
          "summary" : "Create a subscription to a job config",
          "description" : "",
          "operationId" : "createSubscriptionToJobConfig",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/SubscriptionRequest"
            }
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/SubscriptionResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/tags" : {
        "put" : {
          "tags" : [ "Job Config Tags" ],
          "summary" : "Attach tags to job config",
          "description" : "",
          "operationId" : "addTagsToJobConfig",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/JobConfigTagsResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "delete" : {
          "tags" : [ "Job Config Tags" ],
          "summary" : "Removes tags from job config",
          "description" : "",
          "operationId" : "removeTagsFromJobConfig",
          "consumes" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates" : {
        "get" : {
          "tags" : [ "Job Template" ],
          "summary" : "Get a list of Job Templates",
          "description" : "",
          "operationId" : "getJobTemplates",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "onlyfavs",
            "in" : "query",
            "description" : "Show all or only favorite Job Templates",
            "required" : false,
            "type" : "boolean",
            "default" : false
          }, {
            "name" : "active",
            "in" : "query",
            "description" : "Boolean to determine if Active or Inactive job templates should be returned.",
            "required" : false,
            "type" : "boolean"
          }, {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "permissions",
            "in" : "query",
            "description" : "Set to true to include current user's permissions for each object in response",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/JobTemplateListResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "post" : {
          "tags" : [ "Job Template" ],
          "summary" : "Create a Job Template",
          "description" : "",
          "operationId" : "createJobTemplate",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/JobTemplateRequest"
            }
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/JobTemplateResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/dropdown" : {
        "get" : {
          "tags" : [ "Job Template" ],
          "summary" : "List JobTemplate Dropdown",
          "description" : "",
          "operationId" : "getJobTemplatesForDropDown",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/DropDownListResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/favorites" : {
        "post" : {
          "tags" : [ "Job Templates Bulk APIs" ],
          "summary" : "Set the job template as an user favorite.",
          "description" : "",
          "operationId" : "bulkCreateJobTemplateFavorites",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/BulkOperation"
            }
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/FavoriteResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "delete" : {
          "tags" : [ "Job Templates Bulk APIs" ],
          "summary" : "Unsets the job templates as an user favorite",
          "description" : "",
          "operationId" : "bulkDeleteJobTemplateFavorites",
          "parameters" : [ {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/BulkOperation"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/import" : {
        "post" : {
          "tags" : [ "Job Template" ],
          "summary" : "Import a JobTemplate",
          "description" : "JobTemplate and child JobConfig metadata, macros, and files are imported from a zip file.",
          "operationId" : "importJobTemplate",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "file",
            "in" : "formData",
            "required" : true,
            "type" : "file"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/JobTemplateResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/package" : {
        "post" : {
          "tags" : [ "Job Template" ],
          "summary" : "Create a new Job Template from a djar package",
          "description" : "Upload a djar package, set an entrypoint by providing rtc or entrypoint to the job template. If no rtc or entrypoint is provided, an entrypoint is set by default.",
          "operationId" : "createJobTemplateFromPackage",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "name",
            "in" : "query",
            "description" : "Job Template Name",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "entrypoint",
            "in" : "query",
            "description" : "Package Entry Point",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "integid",
            "in" : "query",
            "description" : "Integration Design Project Id",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "active",
            "in" : "query",
            "description" : "Activate At Create",
            "required" : false,
            "type" : "boolean"
          }, {
            "name" : "file",
            "in" : "formData",
            "description" : "Package File / Integration Spec",
            "required" : true,
            "type" : "file"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/JobTemplateResponse"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}" : {
        "get" : {
          "tags" : [ "Job Template" ],
          "summary" : "Get a Job Template",
          "description" : "",
          "operationId" : "getJobTemplate",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/JobTemplateResponse"
              }
            },
            "401" : {
              "description" : "unathorized"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "put" : {
          "tags" : [ "Job Template" ],
          "summary" : "Update a job Template",
          "description" : "",
          "operationId" : "updateJobTemplate",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/JobTemplateRequest"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/JobTemplateResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "delete" : {
          "tags" : [ "Job Template" ],
          "summary" : "Delete a Job Template",
          "description" : "",
          "operationId" : "deleteJobTemplate",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "cascade",
            "in" : "query",
            "required" : false,
            "type" : "boolean"
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "patch" : {
          "tags" : [ "Job Template" ],
          "summary" : "Patch a job Template",
          "description" : "",
          "operationId" : "patchJobTemplate",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/JobTemplateRequest"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/JobTemplateResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/clone" : {
        "post" : {
          "tags" : [ "Job Template" ],
          "summary" : "Clone a Job Template",
          "description" : "",
          "operationId" : "cloneJobTemplate",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "name",
            "in" : "query",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/JobTemplateResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/export" : {
        "post" : {
          "tags" : [ "Job Template" ],
          "summary" : "Export a JobTemplate.",
          "description" : "JobTemplate metadata, macros, and files are exported as a zip file. By default, child JobConfig metadata, macros, and files are included. Account and User metadata and linked Public and Private files are excluded. Secure macros are exported as key only.",
          "operationId" : "exportJobTemplate",
          "produces" : [ "application/octet-stream" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "query",
            "description" : "id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "includejobconfigs",
            "in" : "query",
            "description" : "Include child JobConfigs in export.",
            "required" : false,
            "type" : "boolean",
            "default" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/StreamingResponseBody"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "404" : {
              "description" : "Not Found"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/favorites" : {
        "post" : {
          "tags" : [ "Job Template" ],
          "summary" : "Sets the job template as a user favorite.",
          "description" : "",
          "operationId" : "createJobTemplateFavorite",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/FavoriteResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "delete" : {
          "tags" : [ "Job Template" ],
          "summary" : "Unsets the job template as a user favorite",
          "description" : "",
          "operationId" : "deleteJobTemplateFavorite",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/filelinks" : {
        "post" : {
          "tags" : [ "Job Template Files" ],
          "summary" : "Create JobTemplate File Link",
          "description" : "",
          "operationId" : "createJobTemplateFileLink",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/FileLinkRequest"
            }
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/FileResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "409" : {
              "description" : "Conflict"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/filelinks/{linkid}" : {
        "delete" : {
          "tags" : [ "Job Template Files" ],
          "summary" : "Delete Jobtemplate File Link",
          "description" : "",
          "operationId" : "deleteJobTemplateFileLink",
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/files" : {
        "get" : {
          "tags" : [ "Job Template Files" ],
          "summary" : "Get a List of Job Template Files",
          "description" : "",
          "operationId" : "listJobTemplateFiles",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job template id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/FileListResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "post" : {
          "tags" : [ "Job Template Files" ],
          "summary" : "Create a new Job Template File",
          "description" : "Request body contents will be saved to the file contents. ",
          "operationId" : "createJobTemplateFile",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Template id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "key",
            "in" : "formData",
            "description" : "file name",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "file",
            "in" : "formData",
            "description" : "file content",
            "required" : true,
            "type" : "file"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/FileResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/files/entrypoints/{key+}" : {
        "get" : {
          "tags" : [ "Job Template Files" ],
          "summary" : "Retrieve the Entry Points defined inside ANY package attached to a Job Template",
          "description" : "",
          "operationId" : "getJobTemplateFileEntryPoints",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "key",
            "in" : "path",
            "description" : "Name of the file.",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/EntryPoints"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Not Found"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/files/{key}" : {
        "get" : {
          "tags" : [ "Job Template Files" ],
          "summary" : "Get a Job Template File",
          "description" : "",
          "operationId" : "getJobTemplateFile",
          "produces" : [ "application/octet-stream" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Template id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "key",
            "in" : "path",
            "description" : "file name",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "put" : {
          "tags" : [ "Job Template Files" ],
          "summary" : "Update a Job Template File",
          "description" : "Request body contents will be saved to the file contents. ",
          "operationId" : "updateJobTemplateFile",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Template id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "key",
            "in" : "formData",
            "description" : "file name",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "file",
            "in" : "formData",
            "description" : "file content",
            "required" : true,
            "type" : "file"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/FileResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "delete" : {
          "tags" : [ "Job Template Files" ],
          "summary" : "Delete a Job Template File",
          "description" : "",
          "operationId" : "deleteJobTemplateFile",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Template id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "key",
            "in" : "path",
            "description" : "file name",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/jobconfigs" : {
        "get" : {
          "tags" : [ "Job Template" ],
          "summary" : "List the Job Configs on the Job Template",
          "description" : "",
          "operationId" : "getJobTemplateJobConfigs",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/JobConfigListResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "post" : {
          "tags" : [ "Job Template" ],
          "summary" : "Create a Job Config on a Job Template",
          "description" : "",
          "operationId" : "createJobTemplateJobConfig",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/JobConfigRequest"
            }
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/JobConfigResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/jobconfigs/package" : {
        "post" : {
          "tags" : [ "Job Template" ],
          "summary" : "Create a new Job Config from a djar package",
          "description" : "Upload a djar package, set an entrypoint by providing rtc or entrypoint to the job config. If no rtc or entrypoint is provided, an entrypoint is set by default.",
          "operationId" : "createJobTemplateJobConfigFromPackage",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Template Id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "name",
            "in" : "query",
            "description" : "Job Configuration name",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "entrypoint",
            "in" : "query",
            "description" : "The entrypoint file in the package",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "integid",
            "in" : "query",
            "description" : "Integration Design Project Id",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "active",
            "in" : "query",
            "description" : "Active status",
            "required" : false,
            "type" : "boolean",
            "default" : false
          }, {
            "name" : "file",
            "in" : "formData",
            "description" : "Package file",
            "required" : true,
            "type" : "file"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/JobConfigResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/macrodef" : {
        "post" : {
          "tags" : [ "Job Template Macros" ],
          "summary" : "Import distinct Macros from MacroDef file to Job Template",
          "description" : "Macro value is only returned if the macro is not marked as secure. ",
          "operationId" : "importJobTemplateMacroDef",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "file",
            "in" : "formData",
            "description" : "MacroDef file, Json or Xml",
            "required" : true,
            "type" : "file"
          }, {
            "name" : "replace",
            "in" : "query",
            "required" : false,
            "type" : "boolean"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/MacroListResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "500" : {
              "description" : "server exception"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/macros" : {
        "get" : {
          "tags" : [ "Job Template Macros" ],
          "summary" : "List the Macros on the Job Template",
          "description" : "Macro value is only returned if the macro is not marked as secure. ",
          "operationId" : "listJobTemplateMacros",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/MacroListResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "post" : {
          "tags" : [ "Job Template Macros" ],
          "summary" : "Create a Macro on the Job Template",
          "description" : "Macro value is only returned if the macro is not marked as secure. ",
          "operationId" : "createJobTemplateMacro",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/MacroRequest"
            }
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/MacroResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/macros/{name}" : {
        "get" : {
          "tags" : [ "Job Template Macros" ],
          "summary" : "Get a Macro from the Job Template",
          "description" : "Macro value is only returned if the macro is not marked as secure. ",
          "operationId" : "getJobTemplateMacro",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/MacroResponse"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "post" : {
          "tags" : [ "Job Template Macros" ],
          "summary" : "Create a Macro on the Job Template from a file",
          "description" : "Macro value is only returned if the macro is not marked as secure. ",
          "operationId" : "createJobTemplateMacroFromFile",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "file",
            "in" : "formData",
            "description" : "Source File",
            "required" : true,
            "type" : "file"
          }, {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "secure",
            "in" : "query",
            "description" : "Is Macro Secure",
            "required" : true,
            "type" : "boolean"
          }, {
            "name" : "description",
            "in" : "query",
            "description" : "Macro Description",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "201" : {
              "description" : "Created",
              "schema" : {
                "$ref" : "#/definitions/MacroResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "409" : {
              "description" : "Conflict"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "put" : {
          "tags" : [ "Job Template Macros" ],
          "summary" : "Create a Macro on the Job Template from a file",
          "description" : "Macro value is only returned if the macro is not marked as secure. ",
          "operationId" : "updateJobTemplateMacroFromFile",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "file",
            "in" : "formData",
            "description" : "Source File",
            "required" : true,
            "type" : "file"
          }, {
            "name" : "secure",
            "in" : "query",
            "description" : "Is Macro Secure",
            "required" : true,
            "type" : "boolean"
          }, {
            "name" : "description",
            "in" : "query",
            "description" : "Macro Description",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/MacroResponse"
              }
            },
            "201" : {
              "description" : "successful operation",
              "schema" : {
                "$ref" : "#/definitions/MacroResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "NotFound"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "delete" : {
          "tags" : [ "Job Template Macros" ],
          "summary" : "Delete a Macro on a Job Template",
          "description" : "",
          "operationId" : "deleteJobTemplateMacro",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "204" : {
              "description" : "No Content"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/owner" : {
        "put" : {
          "tags" : [ "Job Template" ],
          "summary" : "Assigns new owner to the Template",
          "description" : "",
          "operationId" : "updateJobTemplateOwner",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Template Id",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/Reference"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/JobTemplateResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobtemplates/{id}/package/entrypoints" : {
        "get" : {
          "tags" : [ "Job Template" ],
          "summary" : "Retrieve the Entry Points defined inside the SELECTED package on a Job Template",
          "description" : "",
          "operationId" : "getJobTemplateEntryPoints",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/EntryPoints"
              }
            },
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/login" : {
        "post" : {
          "tags" : [ "@Login" ],
          "summary" : "Retrieve an access_token",
          "description" : "The access_token value is used in the Authorization header in the format 'Authorization: Bearer [access_token value]' to make other API calls.",
          "operationId" : "login",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/LoginRequest"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Access Token",
              "schema" : {
                "$ref" : "#/definitions/AccessTokenResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Inactive, Bad Credentials, or Locked Out"
            }
          }
        }
      },
      "/product/info" : {
        "get" : {
          "tags" : [ "@Login" ],
          "summary" : "Retrieve detailed product information",
          "description" : "",
          "operationId" : "getProductInfo",
          "produces" : [ "application/json" ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/InstalledProductInfo"
              }
            }
          }
        }
      }
    },
    "securityDefinitions" : {
      "Bearer token" : {
        "description" : "Enter access_token value from Login. Use format 'Bearer [access_token value]'.",
        "type" : "apiKey",
        "name" : "authorization",
        "in" : "header"
      }
    },
    "definitions" : {
      "AccessTokenResponse" : {
        "type" : "object",
        "properties" : {
          "access_token" : {
            "type" : "string"
          },
          "token_type" : {
            "type" : "string"
          },
          "expires_in" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "BulkOperation" : {
        "type" : "object",
        "properties" : {
          "recordIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "DropDownListResponse" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "totalRecords" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sortBy" : {
            "type" : "string"
          },
          "direction" : {
            "type" : "string"
          },
          "filter" : {
            "type" : "string"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Reference"
            }
          }
        }
      },
      "Duration" : {
        "type" : "object",
        "properties" : {
          "seconds" : {
            "type" : "integer",
            "format" : "int64"
          },
          "zero" : {
            "type" : "boolean"
          },
          "nano" : {
            "type" : "integer",
            "format" : "int32"
          },
          "negative" : {
            "type" : "boolean"
          },
          "units" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/TemporalUnit"
            }
          }
        }
      },
      "EntryPoints" : {
        "type" : "object",
        "properties" : {
          "packageName" : {
            "type" : "string"
          },
          "entryPoints" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "FavoriteResponse" : {
        "type" : "object",
        "properties" : {
          "resourceId" : {
            "type" : "string"
          },
          "resourceType" : {
            "type" : "string"
          },
          "user" : {
            "$ref" : "#/definitions/Reference"
          }
        }
      },
      "FileLinkRequest" : {
        "type" : "object",
        "properties" : {
          "entityType" : {
            "type" : "string",
            "enum" : [ "ACCOUNT", "GROUP", "USER", "PROVISIONING", "LICENSE", "JOBTEMPLATE", "JOBCONFIG", "JOB", "JOB_OUTPUT", "TEMP", "AGENT", "INTEGRATION", "DRIVER" ]
          },
          "entityId" : {
            "type" : "string"
          },
          "fileName" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          }
        }
      },
      "FileListResponse" : {
        "type" : "object",
        "properties" : {
          "totalRecords" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sortBy" : {
            "type" : "string"
          },
          "direction" : {
            "type" : "string"
          },
          "filter" : {
            "$ref" : "#/definitions/FilterRequest"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/FileResponse"
            }
          },
          "links" : {
            "$ref" : "#/definitions/ListLink"
          },
          "filterRequest" : {
            "$ref" : "#/definitions/FilterRequest"
          }
        }
      },
      "FileMetaData" : {
        "type" : "object",
        "properties" : {
          "size" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastModified" : {
            "type" : "string",
            "format" : "date-time"
          },
          "contentType" : {
            "type" : "string"
          },
          "entityType" : {
            "type" : "string",
            "enum" : [ "ACCOUNT", "GROUP", "USER", "PROVISIONING", "LICENSE", "JOBTEMPLATE", "JOBCONFIG", "JOB", "JOB_OUTPUT", "TEMP", "AGENT", "INTEGRATION", "DRIVER" ]
          },
          "entityId" : {
            "type" : "string"
          },
          "linkType" : {
            "type" : "string",
            "enum" : [ "LINK", "INHERITED", "LOCAL" ]
          },
          "linkId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "FileResponse" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "linkId" : {
            "type" : "string"
          },
          "metadata" : {
            "$ref" : "#/definitions/FileMetaData"
          }
        }
      },
      "FilterRequest" : {
        "type" : "object",
        "properties" : {
          "and" : {
            "type" : "boolean",
            "example" : true
          },
          "or" : {
            "type" : "boolean",
            "example" : false
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/OperationRequest"
            }
          },
          "subfilters" : {
            "type" : "array",
            "example" : "[{\"and\":true,\"operations\":\"More filters can go here (recursive)\"}]",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "InstalledProductInfo" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "copyright" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "buildDate" : {
            "type" : "string"
          }
        }
      },
      "JobConfigListResponse" : {
        "type" : "object",
        "properties" : {
          "totalRecords" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sortBy" : {
            "type" : "string"
          },
          "direction" : {
            "type" : "string"
          },
          "filter" : {
            "$ref" : "#/definitions/FilterRequest"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/JobConfigResponse"
            }
          },
          "links" : {
            "$ref" : "#/definitions/ListLink"
          },
          "filterRequest" : {
            "$ref" : "#/definitions/FilterRequest"
          }
        }
      },
      "JobConfigRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean"
          },
          "blocking" : {
            "type" : "boolean"
          },
          "jobTemplateId" : {
            "type" : "string"
          },
          "destinationId" : {
            "type" : "string"
          },
          "agentId" : {
            "type" : "string"
          },
          "integrationId" : {
            "type" : "string"
          },
          "profileId" : {
            "type" : "string"
          },
          "runtimeConfig" : {
            "$ref" : "#/definitions/RuntimeConfig"
          },
          "macrosets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "schedule" : {
            "type" : "string"
          },
          "timeout" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "JobConfigResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdByUser" : {
            "$ref" : "#/definitions/Reference"
          },
          "lastModified" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastModifiedByUser" : {
            "$ref" : "#/definitions/Reference"
          },
          "allowed" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "blocking" : {
            "type" : "boolean"
          },
          "favorite" : {
            "type" : "boolean"
          },
          "remote" : {
            "type" : "boolean"
          },
          "schedule" : {
            "type" : "string"
          },
          "nextFireTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "timeout" : {
            "type" : "integer",
            "format" : "int32"
          },
          "template" : {
            "$ref" : "#/definitions/Reference"
          },
          "destination" : {
            "$ref" : "#/definitions/Reference"
          },
          "agent" : {
            "$ref" : "#/definitions/Reference"
          },
          "integration" : {
            "$ref" : "#/definitions/Reference"
          },
          "profile" : {
            "$ref" : "#/definitions/Reference"
          },
          "runtimeConfig" : {
            "$ref" : "#/definitions/RuntimeConfig"
          },
          "macrosets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "user" : {
            "$ref" : "#/definitions/Reference"
          },
          "description" : {
            "type" : "string"
          },
          "permissions" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "JobConfigTagsResponse" : {
        "type" : "object",
        "properties" : {
          "jobConfigId" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "user" : {
            "$ref" : "#/definitions/Reference"
          }
        }
      },
      "JobTemplateListResponse" : {
        "type" : "object",
        "properties" : {
          "totalRecords" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sortBy" : {
            "type" : "string"
          },
          "direction" : {
            "type" : "string"
          },
          "filter" : {
            "$ref" : "#/definitions/FilterRequest"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/JobTemplateResponse"
            }
          },
          "links" : {
            "$ref" : "#/definitions/ListLink"
          },
          "filterRequest" : {
            "$ref" : "#/definitions/FilterRequest"
          }
        }
      },
      "JobTemplateRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean"
          },
          "runtimeConfig" : {
            "$ref" : "#/definitions/RuntimeConfig"
          },
          "destinationId" : {
            "type" : "string"
          },
          "agentId" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "JobTemplateResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdByUser" : {
            "$ref" : "#/definitions/Reference"
          },
          "lastModified" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastModifiedByUser" : {
            "$ref" : "#/definitions/Reference"
          },
          "allowed" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "favorite" : {
            "type" : "boolean"
          },
          "remote" : {
            "type" : "boolean"
          },
          "destination" : {
            "$ref" : "#/definitions/Reference"
          },
          "agent" : {
            "$ref" : "#/definitions/Reference"
          },
          "runtimeConfig" : {
            "$ref" : "#/definitions/RuntimeConfig"
          },
          "user" : {
            "$ref" : "#/definitions/Reference"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "ListLink" : {
        "type" : "object",
        "properties" : {
          "prev" : {
            "type" : "string"
          },
          "next" : {
            "type" : "string"
          }
        }
      },
      "LocalTime" : {
        "type" : "object",
        "properties" : {
          "hour" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minute" : {
            "type" : "integer",
            "format" : "int32"
          },
          "second" : {
            "type" : "integer",
            "format" : "int32"
          },
          "nano" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "LoginRequest" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        }
      },
      "Macro" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "secure" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          }
        }
      },
      "MacroListResponse" : {
        "type" : "object",
        "properties" : {
          "totalRecords" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sortBy" : {
            "type" : "string"
          },
          "direction" : {
            "type" : "string"
          },
          "filter" : {
            "$ref" : "#/definitions/FilterRequest"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/MacroResponse"
            }
          },
          "links" : {
            "$ref" : "#/definitions/ListLink"
          },
          "filterRequest" : {
            "$ref" : "#/definitions/FilterRequest"
          }
        }
      },
      "MacroMergeResponse" : {
        "type" : "object",
        "properties" : {
          "macroSet" : {
            "$ref" : "#/definitions/MacroSetResponse"
          },
          "keysRead" : {
            "type" : "integer",
            "format" : "int32"
          },
          "keysCreated" : {
            "type" : "integer",
            "format" : "int32"
          },
          "keysUpdated" : {
            "type" : "integer",
            "format" : "int32"
          },
          "existingKeys" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "MacroRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "secure" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "MacroResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdByUser" : {
            "$ref" : "#/definitions/Reference"
          },
          "lastModified" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastModifiedByUser" : {
            "$ref" : "#/definitions/Reference"
          },
          "allowed" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "value" : {
            "type" : "string"
          },
          "secure" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "MacroSetListResponse" : {
        "type" : "object",
        "properties" : {
          "totalRecords" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sortBy" : {
            "type" : "string"
          },
          "direction" : {
            "type" : "string"
          },
          "filter" : {
            "$ref" : "#/definitions/FilterRequest"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/MacroSetResponse"
            }
          },
          "links" : {
            "$ref" : "#/definitions/ListLink"
          },
          "filterRequest" : {
            "$ref" : "#/definitions/FilterRequest"
          }
        }
      },
      "MacroSetResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "visibility" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          }
        }
      },
      "OperationRequest" : {
        "type" : "object",
        "required" : [ "operator" ],
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "example" : "id"
          },
          "object" : {
            "type" : "string",
            "example" : "jobConfig"
          },
          "operator" : {
            "type" : "string",
            "example" : "=",
            "enum" : [ "\"=\"", "\"eq\"", "\"!=\"", "\"ne\"", "\"<\"", "\"lt\"", "\"<=\"", "\"lte\"", "\">\"", "\"gt\"", "\">=\"", "\"gte\"", "\"subquery\"", "\"in\"", "\"!in\"", "\"null\"", "\"!null\"", "\"contains\"", "\"!contains\"", "\"none\"" ]
          },
          "value" : {
            "type" : "object",
            "example" : "value"
          },
          "values" : {
            "type" : "array",
            "example" : "[1,2]",
            "uniqueItems" : true,
            "items" : {
              "type" : "object"
            }
          },
          "in" : {
            "$ref" : "#/definitions/FilterRequest"
          },
          "date" : {
            "type" : "string"
          }
        }
      },
      "Property" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "Reference" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          }
        }
      },
      "RuntimeConfig" : {
        "type" : "object",
        "properties" : {
          "packageName" : {
            "type" : "string"
          },
          "entryPoint" : {
            "type" : "string"
          },
          "logLevel" : {
            "type" : "string"
          },
          "packageArtifactOverride" : {
            "type" : "boolean"
          },
          "packageEntityType" : {
            "type" : "string"
          },
          "packageEntityId" : {
            "type" : "string"
          },
          "packagePrefix" : {
            "type" : "string"
          },
          "macros" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Macro"
            }
          },
          "inMessages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/TextMessage"
            }
          },
          "outMessageNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ScheduleRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "cron", "interval" ]
          },
          "cronSchedule" : {
            "type" : "string"
          },
          "intervalFrequency" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "timeZone" : {
            "$ref" : "#/definitions/TimeZone"
          },
          "webhookConfig" : {
            "$ref" : "#/definitions/WebhookConfig"
          }
        }
      },
      "ScheduleResponse" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "cronSchedule" : {
            "type" : "string"
          },
          "intervalFrequency" : {
            "type" : "string"
          },
          "nextFireTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "description" : {
            "type" : "string"
          },
          "timeZone" : {
            "$ref" : "#/definitions/TimeZone"
          },
          "timeZoneDisplayName" : {
            "type" : "string"
          },
          "timeZoneShortId" : {
            "type" : "string"
          },
          "timeZoneOffset" : {
            "$ref" : "#/definitions/ZoneOffset"
          },
          "resourceId" : {
            "type" : "string"
          },
          "resourceType" : {
            "type" : "string"
          },
          "webhookConfig" : {
            "$ref" : "#/definitions/WebhookConfig"
          }
        }
      },
      "StreamingResponseBody" : {
        "type" : "object"
      },
      "SubscriptionRequest" : {
        "type" : "object",
        "properties" : {
          "jobConfig" : {
            "$ref" : "#/definitions/Reference"
          },
          "active" : {
            "type" : "boolean"
          },
          "recipients" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SubscriptionResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdByUser" : {
            "$ref" : "#/definitions/Reference"
          },
          "lastModified" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastModifiedByUser" : {
            "$ref" : "#/definitions/Reference"
          },
          "allowed" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "active" : {
            "type" : "boolean"
          },
          "recipients" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "jobConfig" : {
            "$ref" : "#/definitions/Reference"
          },
          "user" : {
            "$ref" : "#/definitions/Reference"
          }
        }
      },
      "TemporalUnit" : {
        "type" : "object",
        "properties" : {
          "durationEstimated" : {
            "type" : "boolean"
          },
          "duration" : {
            "$ref" : "#/definitions/Duration"
          },
          "timeBased" : {
            "type" : "boolean"
          },
          "dateBased" : {
            "type" : "boolean"
          }
        }
      },
      "TextMessage" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "body" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "href" : {
            "type" : "string"
          }
        }
      },
      "TimeZone" : {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "dstsavings" : {
            "type" : "integer",
            "format" : "int32"
          },
          "rawOffset" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "WebhookConfig" : {
        "type" : "object",
        "properties" : {
          "method" : {
            "type" : "string"
          },
          "endpoint" : {
            "type" : "string"
          },
          "payload" : {
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "lastExecutionStatusCode" : {
            "type" : "string"
          },
          "lastExecutionMessage" : {
            "type" : "string"
          },
          "lastExecutionTime" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ZoneOffset" : {
        "type" : "object",
        "properties" : {
          "totalSeconds" : {
            "type" : "integer",
            "format" : "int32"
          },
          "id" : {
            "type" : "string"
          },
          "rules" : {
            "$ref" : "#/definitions/ZoneRules"
          }
        }
      },
      "ZoneOffsetTransition" : {
        "type" : "object",
        "properties" : {
          "offsetBefore" : {
            "$ref" : "#/definitions/ZoneOffset"
          },
          "offsetAfter" : {
            "$ref" : "#/definitions/ZoneOffset"
          },
          "instant" : {
            "type" : "integer",
            "format" : "int64"
          },
          "overlap" : {
            "type" : "boolean"
          },
          "duration" : {
            "$ref" : "#/definitions/Duration"
          },
          "gap" : {
            "type" : "boolean"
          },
          "dateTimeAfter" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dateTimeBefore" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ZoneOffsetTransitionRule" : {
        "type" : "object",
        "properties" : {
          "month" : {
            "type" : "string",
            "enum" : [ "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER" ]
          },
          "timeDefinition" : {
            "type" : "string",
            "enum" : [ "UTC", "WALL", "STANDARD" ]
          },
          "standardOffset" : {
            "$ref" : "#/definitions/ZoneOffset"
          },
          "offsetBefore" : {
            "$ref" : "#/definitions/ZoneOffset"
          },
          "offsetAfter" : {
            "$ref" : "#/definitions/ZoneOffset"
          },
          "dayOfWeek" : {
            "type" : "string",
            "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
          },
          "dayOfMonthIndicator" : {
            "type" : "integer",
            "format" : "int32"
          },
          "localTime" : {
            "$ref" : "#/definitions/LocalTime"
          },
          "midnightEndOfDay" : {
            "type" : "boolean"
          }
        }
      },
      "ZoneRules" : {
        "type" : "object",
        "properties" : {
          "fixedOffset" : {
            "type" : "boolean"
          },
          "transitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ZoneOffsetTransition"
            }
          },
          "transitionRules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ZoneOffsetTransitionRule"
            }
          }
        }
      }
    }
  }