{
    "swagger" : "2.0",
    "info" : {
      "version" : "3.3.0-47",
      "title" : "Job Execution"
    },
    "host" : "api.im.actiandatacloud.com",
    "basePath" : "/v2/api",
    "tags" : [ {
      "name" : "@Login"
    }, {
      "name" : "Integration"
    }, {
      "name" : "Job"
    }, {
      "name" : "JobStats"
    } ],
    "schemes" : [ "https" ],
    "paths" : {
      "/integrations/{id}/jobs" : {
        "get" : {
          "tags" : [ "Integration" ],
          "summary" : "Get a list of jobs for this integration",
          "description" : "",
          "operationId" : "getIntegrationJobs",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Integration Id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "startdate",
            "in" : "query",
            "description" : "Start Date",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "enddate",
            "in" : "query",
            "description" : "End Date",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "schema" : {
                "$ref" : "#/definitions/JobListResponse"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "post" : {
          "tags" : [ "Job" ],
          "summary" : "Start a new job for this integration",
          "description" : "",
          "operationId" : "runIntegration",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : false,
            "schema" : {
              "$ref" : "#/definitions/JobRequest"
            }
          } ],
          "responses" : {
            "202" : {
              "description" : ""
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/jobs" : {
        "get" : {
          "tags" : [ "Job" ],
          "summary" : "Get a list of jobs for this jobConfig",
          "description" : "",
          "operationId" : "getJobConfigJobs",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "startdate",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "enddate",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "schema" : {
                "$ref" : "#/definitions/JobListResponse"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "post" : {
          "tags" : [ "Job" ],
          "summary" : "Start a new job for this jobConfig",
          "description" : "",
          "operationId" : "runJobConfig",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : false,
            "schema" : {
              "$ref" : "#/definitions/JobRequest"
            }
          }, {
            "name" : "ordered",
            "in" : "query",
            "required" : false,
            "type" : "boolean"
          } ],
          "responses" : {
            "202" : {
              "description" : ""
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/listener" : {
        "post" : {
          "tags" : [ "Job" ],
          "summary" : "Run a job for this jobConfig with text message input (asynchronous|ordered)",
          "description" : "",
          "operationId" : "runJobConfigWithMessage",
          "consumes" : [ "text/plain", "text/xml", "application/xml", "application/json" ],
          "produces" : [ "text/plain", "text/xml", "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "JobConfig Id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "messagename",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "outmessagename",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "async",
            "in" : "query",
            "required" : false,
            "type" : "boolean"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "ordered",
            "in" : "query",
            "required" : false,
            "type" : "boolean"
          } ],
          "responses" : {
            "202" : {
              "description" : ""
            }
          },
          "security" : [ {
            "Basic authorization" : [ ]
          }, {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobconfigs/{id}/listener/file" : {
        "post" : {
          "tags" : [ "Job" ],
          "summary" : "Run a job for this jobConfig with file input (asynchronous)",
          "description" : "Filename will be available as $(LOCAL_JOB_SPEC_DIR)/filename at runtime.",
          "operationId" : "runJobConfigWithFile",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "JobConfig Id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "file",
            "in" : "formData",
            "description" : "Source File",
            "required" : true,
            "type" : "file"
          }, {
            "name" : "key",
            "in" : "formData",
            "description" : "File Name Override",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "202" : {
              "description" : ""
            }
          },
          "security" : [ {
            "Basic authorization" : [ ]
          }, {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs" : {
        "get" : {
          "tags" : [ "Job" ],
          "summary" : "Get a list of jobs",
          "description" : "",
          "operationId" : "listJobs",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "jobtemplateid",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "jobconfigid",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "integid",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "userid",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "state",
            "in" : "query",
            "required" : false,
            "type" : "string",
            "enum" : [ "waiting", "queued", "initializing", "running", "finished_all", "finished_ok", "finished_error", "cancelled", "aborted", "unknown" ]
          }, {
            "name" : "startdate",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "enddate",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "schema" : {
                "$ref" : "#/definitions/JobListResponse"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs/package" : {
        "post" : {
          "tags" : [ "Job" ],
          "summary" : "Run a job with an ad hoc package",
          "description" : "This API requires an integration package file and optional entrypoint.",
          "operationId" : "runPackage",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "package",
            "in" : "formData",
            "description" : "Package File / Integration Spec",
            "required" : true,
            "type" : "file"
          }, {
            "name" : "entrypoint",
            "in" : "query",
            "description" : "Package Entry Point (required for [djar, jar, sqlite] packages)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "integid",
            "in" : "query",
            "description" : "Integration Design Project Id",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "targetid",
            "in" : "query",
            "description" : "Run Location Id",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "loglevel",
            "in" : "query",
            "description" : "Logging Level",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "macrosets",
            "in" : "query",
            "description" : "Macrosets (comma-separated, applied in order)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "profileid",
            "in" : "query",
            "description" : "Profile ID",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "tags",
            "in" : "query",
            "description" : "Tags (comma-separated)",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "202" : {
              "description" : ""
            }
          },
          "security" : [ {
            "Basic authorization" : [ ]
          }, {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs/pending" : {
        "get" : {
          "tags" : [ "JobStats" ],
          "summary" : "Get a list of pending/queued jobIds",
          "description" : "",
          "operationId" : "pendingJobIds",
          "produces" : [ "application/json" ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs/running" : {
        "get" : {
          "tags" : [ "JobStats" ],
          "summary" : "Get a list of running jobIds",
          "description" : "",
          "operationId" : "runningJobIds",
          "produces" : [ "application/json" ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs/stop" : {
        "delete" : {
          "tags" : [ "Job" ],
          "summary" : "Bulk cancel queued jobs.",
          "description" : "",
          "operationId" : "bulkStopJobs",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/BulkOperation"
            }
          } ],
          "responses" : {
            "202" : {
              "description" : ""
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs/unfinished" : {
        "get" : {
          "tags" : [ "JobStats" ],
          "summary" : "Get a list of unfinished jobIds (pending + running)",
          "description" : "",
          "operationId" : "unfinishedJobIds",
          "produces" : [ "application/json" ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs/{id}" : {
        "get" : {
          "tags" : [ "Job" ],
          "summary" : "Get job info",
          "description" : "",
          "operationId" : "getJob",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "schema" : {
                "$ref" : "#/definitions/JobResponse"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        },
        "delete" : {
          "tags" : [ "Job" ],
          "summary" : "Stop or cancel a job",
          "description" : "",
          "operationId" : "stopJob",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "202" : {
              "description" : "Accepted"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs/{id}/log" : {
        "get" : {
          "tags" : [ "Job" ],
          "summary" : "Retrieve log file for this job",
          "description" : "",
          "operationId" : "getJobLog",
          "produces" : [ "application/octet-stream" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "zoneid",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "default" : {
              "description" : "successful operation"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs/{id}/out" : {
        "get" : {
          "tags" : [ "Job" ],
          "summary" : "Lists job out messages",
          "description" : "",
          "operationId" : "getJobOutMessages",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Job Id",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "schema" : {
                "$ref" : "#/definitions/TextMessageListResponse"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs/{id}/out/files" : {
        "get" : {
          "tags" : [ "Job" ],
          "summary" : "List the output files for this job (if any)",
          "description" : "",
          "operationId" : "getJobOutputFiles",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "offset",
            "in" : "query",
            "description" : "Page number (zero based)",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Page size",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "sortby",
            "in" : "query",
            "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "direction",
            "in" : "query",
            "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "schema" : {
                "$ref" : "#/definitions/FileListResponse"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs/{id}/out/files/{key}" : {
        "get" : {
          "tags" : [ "Job" ],
          "summary" : "Retrieve a specific output file from this job (if exists)",
          "description" : "",
          "operationId" : "getJobOutputFile",
          "produces" : [ "application/octet-stream" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "key",
            "in" : "path",
            "description" : "filename",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs/{id}/out/{messagename}" : {
        "get" : {
          "tags" : [ "Job" ],
          "summary" : "Retrieve output message from this job (json, includes any message properties)",
          "description" : "",
          "operationId" : "getJobOutMessage",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "messagename",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "schema" : {
                "$ref" : "#/definitions/TextMessage"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs/{id}/out/{messagename}/text" : {
        "get" : {
          "tags" : [ "Job" ],
          "summary" : "Retrieve output message body from this job",
          "description" : "",
          "operationId" : "getJobOutMessageText",
          "produces" : [ "text/plain" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "messagename",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "schema" : {
                "type" : "string"
              }
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobs/{id}/package" : {
        "get" : {
          "tags" : [ "Job" ],
          "summary" : "Retrieve package for this job",
          "description" : "",
          "operationId" : "getJobPackage",
          "produces" : [ "application/octet-stream" ],
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "type" : "string"
          } ],
          "responses" : {
            "default" : {
              "description" : "successful operation"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/jobstats" : {
        "get" : {
          "tags" : [ "JobStats" ],
          "summary" : "Get job statistics",
          "description" : "",
          "operationId" : "getJobStats",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "jobtemplateid",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "jobconfigid",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "integid",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "userid",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "startdate",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "enddate",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filter",
            "in" : "query",
            "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "filterby",
            "in" : "query",
            "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "operators",
            "in" : "query",
            "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
            "required" : false,
            "type" : "string"
          } ],
          "responses" : {
            "default" : {
              "description" : "successful operation"
            }
          },
          "security" : [ {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/listener/{alias}" : {
        "post" : {
          "tags" : [ "Job" ],
          "summary" : "Run a job via jobConfig alias with text message input",
          "description" : "JobConfig Alias Authorization Schemes:\n  - Authorization: Basic and Authorization: Bearer [jwt token] are always accepted within the same account\n  - If ONLY api key is set, then it must be supplied via the 'x-api-key' header\n  - If BOTH api key and api secret are set, then Authorization: Basic is required, in the format of Base64Encode(api-key:api-secret)",
          "operationId" : "runAliasWithMessage",
          "consumes" : [ "text/plain", "text/xml", "application/xml", "application/json" ],
          "produces" : [ "text/plain", "text/xml", "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "alias",
            "in" : "path",
            "required" : true,
            "type" : "string"
          }, {
            "name" : "messagename",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "outmessagename",
            "in" : "query",
            "required" : false,
            "type" : "string"
          }, {
            "name" : "async",
            "in" : "query",
            "required" : false,
            "type" : "boolean"
          }, {
            "in" : "body",
            "name" : "body",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "ordered",
            "in" : "query",
            "required" : false,
            "type" : "boolean"
          } ],
          "responses" : {
            "202" : {
              "description" : ""
            }
          },
          "security" : [ {
            "Basic authorization" : [ ]
          }, {
            "x-api-key" : [ ]
          }, {
            "Bearer token" : [ ]
          } ]
        }
      },
      "/login" : {
        "post" : {
          "tags" : [ "@Login" ],
          "summary" : "Retrieve an access_token",
          "description" : "The access_token value is used in the Authorization header in the format 'Authorization: Bearer [access_token value]' to make other API calls.",
          "operationId" : "login",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "in" : "body",
            "name" : "body",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/LoginRequest"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Access Token",
              "schema" : {
                "$ref" : "#/definitions/AccessTokenResponse"
              }
            },
            "400" : {
              "description" : "Bad Request"
            },
            "401" : {
              "description" : "Inactive, Bad Credentials, or Locked Out"
            }
          }
        }
      },
      "/product/info" : {
        "get" : {
          "tags" : [ "@Login" ],
          "summary" : "Retrieve detailed product information",
          "description" : "",
          "operationId" : "getProductInfo",
          "produces" : [ "application/json" ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "schema" : {
                "$ref" : "#/definitions/InstalledProductInfo"
              }
            }
          }
        }
      }
    },
    "securityDefinitions" : {
      "Basic authorization" : {
        "description" : "Enter API username and password. This can also be used for api key (username) and api secret (password) provided for Alias access.",
        "type" : "basic"
      },
      "Bearer token" : {
        "description" : "Enter access_token value from Login. Use format 'Bearer [access_token value]'.",
        "type" : "apiKey",
        "name" : "authorization",
        "in" : "header"
      },
      "x-api-key" : {
        "description" : "Enter x-api-key provided for Alias access.",
        "type" : "apiKey",
        "name" : "x-api-key",
        "in" : "header"
      }
    },
    "definitions" : {
      "AccessTokenResponse" : {
        "type" : "object",
        "properties" : {
          "access_token" : {
            "type" : "string"
          },
          "token_type" : {
            "type" : "string"
          },
          "expires_in" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "BulkOperation" : {
        "type" : "object",
        "properties" : {
          "recordIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "FileListResponse" : {
        "type" : "object",
        "properties" : {
          "totalRecords" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sortBy" : {
            "type" : "string"
          },
          "direction" : {
            "type" : "string"
          },
          "filter" : {
            "$ref" : "#/definitions/FilterRequest"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/FileResponse"
            }
          },
          "links" : {
            "$ref" : "#/definitions/ListLink"
          },
          "filterRequest" : {
            "$ref" : "#/definitions/FilterRequest"
          }
        }
      },
      "FileMetaData" : {
        "type" : "object",
        "properties" : {
          "size" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastModified" : {
            "type" : "string",
            "format" : "date-time"
          },
          "contentType" : {
            "type" : "string"
          },
          "entityType" : {
            "type" : "string",
            "enum" : [ "ACCOUNT", "GROUP", "USER", "PROVISIONING", "LICENSE", "JOBTEMPLATE", "JOBCONFIG", "JOB", "JOB_OUTPUT", "TEMP", "AGENT", "INTEGRATION", "DRIVER" ]
          },
          "entityId" : {
            "type" : "string"
          },
          "linkType" : {
            "type" : "string",
            "enum" : [ "LINK", "INHERITED", "LOCAL" ]
          },
          "linkId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "FileResponse" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "linkId" : {
            "type" : "string"
          },
          "metadata" : {
            "$ref" : "#/definitions/FileMetaData"
          }
        }
      },
      "FilterRequest" : {
        "type" : "object",
        "properties" : {
          "and" : {
            "type" : "boolean",
            "example" : true
          },
          "or" : {
            "type" : "boolean",
            "example" : false
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/OperationRequest"
            }
          },
          "subfilters" : {
            "type" : "array",
            "example" : "[{\"and\":true,\"operations\":\"More filters can go here (recursive)\"}]",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "InstalledProductInfo" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "copyright" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "buildDate" : {
            "type" : "string"
          }
        }
      },
      "JobListResponse" : {
        "type" : "object",
        "properties" : {
          "totalRecords" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sortBy" : {
            "type" : "string"
          },
          "direction" : {
            "type" : "string"
          },
          "filter" : {
            "$ref" : "#/definitions/FilterRequest"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/JobResponse"
            }
          },
          "links" : {
            "$ref" : "#/definitions/ListLink"
          },
          "filterRequest" : {
            "$ref" : "#/definitions/FilterRequest"
          },
          "stats" : {
            "$ref" : "#/definitions/JobStatsResponse"
          }
        }
      },
      "JobRequest" : {
        "type" : "object",
        "properties" : {
          "runtimeConfig" : {
            "$ref" : "#/definitions/RuntimeConfig"
          },
          "jobFiles" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "macrosets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "JobResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "packageName" : {
            "type" : "string"
          },
          "entryPoint" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "scheduled" : {
            "type" : "string",
            "format" : "date-time"
          },
          "received" : {
            "type" : "string",
            "format" : "date-time"
          },
          "started" : {
            "type" : "string",
            "format" : "date-time"
          },
          "finished" : {
            "type" : "string",
            "format" : "date-time"
          },
          "duration" : {
            "type" : "string"
          },
          "engine" : {
            "type" : "string"
          },
          "macrosets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "currentStep" : {
            "type" : "string"
          },
          "returnCode" : {
            "type" : "string"
          },
          "finalDestinationId" : {
            "type" : "string"
          },
          "destination" : {
            "$ref" : "#/definitions/Reference"
          },
          "finalDestination" : {
            "$ref" : "#/definitions/Reference"
          },
          "agent" : {
            "$ref" : "#/definitions/Reference"
          },
          "serverId" : {
            "type" : "string"
          },
          "submittedByUser" : {
            "$ref" : "#/definitions/Reference"
          },
          "stoppedByUser" : {
            "$ref" : "#/definitions/Reference"
          },
          "integration" : {
            "$ref" : "#/definitions/Reference"
          },
          "profile" : {
            "$ref" : "#/definitions/Reference"
          },
          "jobConfig" : {
            "$ref" : "#/definitions/Reference"
          },
          "jobTemplate" : {
            "$ref" : "#/definitions/Reference"
          },
          "jobLog" : {
            "$ref" : "#/definitions/Reference"
          },
          "outMessages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/TextMessage"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "JobStatsResponse" : {
        "type" : "object",
        "properties" : {
          "queued" : {
            "type" : "integer",
            "format" : "int64"
          },
          "running" : {
            "type" : "integer",
            "format" : "int64"
          },
          "finished" : {
            "type" : "integer",
            "format" : "int64"
          },
          "error" : {
            "type" : "integer",
            "format" : "int64"
          },
          "failed" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cancelled" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalJobs" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalDuration" : {
            "type" : "string"
          },
          "window" : {
            "$ref" : "#/definitions/StatsWindow"
          }
        }
      },
      "ListLink" : {
        "type" : "object",
        "properties" : {
          "prev" : {
            "type" : "string"
          },
          "next" : {
            "type" : "string"
          }
        }
      },
      "LoginRequest" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        }
      },
      "Macro" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "secure" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          }
        }
      },
      "OperationRequest" : {
        "type" : "object",
        "required" : [ "operator" ],
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "example" : "id"
          },
          "object" : {
            "type" : "string",
            "example" : "jobConfig"
          },
          "operator" : {
            "type" : "string",
            "example" : "=",
            "enum" : [ "\"=\"", "\"eq\"", "\"!=\"", "\"ne\"", "\"<\"", "\"lt\"", "\"<=\"", "\"lte\"", "\">\"", "\"gt\"", "\">=\"", "\"gte\"", "\"subquery\"", "\"in\"", "\"!in\"", "\"null\"", "\"!null\"", "\"contains\"", "\"!contains\"", "\"none\"" ]
          },
          "value" : {
            "type" : "object",
            "example" : "value"
          },
          "values" : {
            "type" : "array",
            "example" : "[1,2]",
            "uniqueItems" : true,
            "items" : {
              "type" : "object"
            }
          },
          "in" : {
            "$ref" : "#/definitions/FilterRequest"
          },
          "date" : {
            "type" : "string"
          }
        }
      },
      "Property" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "Reference" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          }
        }
      },
      "RuntimeConfig" : {
        "type" : "object",
        "properties" : {
          "packageName" : {
            "type" : "string"
          },
          "entryPoint" : {
            "type" : "string"
          },
          "logLevel" : {
            "type" : "string"
          },
          "packageArtifactOverride" : {
            "type" : "boolean"
          },
          "packageEntityType" : {
            "type" : "string"
          },
          "packageEntityId" : {
            "type" : "string"
          },
          "packagePrefix" : {
            "type" : "string"
          },
          "macros" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Macro"
            }
          },
          "inMessages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/TextMessage"
            }
          },
          "outMessageNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "StatsWindow" : {
        "type" : "object",
        "properties" : {
          "windowBegins" : {
            "type" : "string",
            "format" : "date-time"
          },
          "windowEnds" : {
            "type" : "string",
            "format" : "date-time"
          },
          "windowDuration" : {
            "type" : "string"
          }
        }
      },
      "TextMessage" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "body" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "href" : {
            "type" : "string"
          }
        }
      },
      "TextMessageListResponse" : {
        "type" : "object",
        "properties" : {
          "totalRecords" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sortBy" : {
            "type" : "string"
          },
          "direction" : {
            "type" : "string"
          },
          "filter" : {
            "$ref" : "#/definitions/FilterRequest"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/TextMessage"
            }
          },
          "links" : {
            "$ref" : "#/definitions/ListLink"
          },
          "filterRequest" : {
            "$ref" : "#/definitions/FilterRequest"
          }
        }
      }
    }
  }