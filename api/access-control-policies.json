{
  "swagger" : "2.0",
  "info" : {
    "description" : "Manage access policies.",
    "version" : "3.3.0-47",
    "title" : "Access Control Policies"
  },
  "host" : "api.im.actiandatacloud.com",
  "basePath" : "/v2/api",
  "tags" : [ {
    "name" : "@Login"
  }, {
    "name" : "Policy"
  }, {
    "name" : "Policy Assignment"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/access/permissions" : {
      "get" : {
        "tags" : [ "Policy" ],
        "summary" : "Permissions available to assign for a given resource type.",
        "description" : "",
        "operationId" : "getAvailablePermissions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "resourcetype",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Access Denied"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "Bearer token" : [ ]
        } ]
      }
    },
    "/access/policies" : {
      "get" : {
        "tags" : [ "Policy" ],
        "summary" : "Retrieve a list of access policies. Rules for each policy will be included, but will eventually be deprecated so that rules must be requested separately. Account Admin role required.",
        "description" : "",
        "operationId" : "getAccessPolicies",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Page number (zero based)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortby",
          "in" : "query",
          "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterby",
          "in" : "query",
          "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "operators",
          "in" : "query",
          "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AccessPolicyListResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Access Denied"
          }
        },
        "security" : [ {
          "Bearer token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Policy" ],
        "summary" : "Create a new access policy. Account Admin role required.",
        "description" : "",
        "operationId" : "createAccessPolicy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AccessPolicyRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/AccessPolicyResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Access Denied"
          }
        },
        "security" : [ {
          "Bearer token" : [ ]
        } ]
      }
    },
    "/access/policies/{id}" : {
      "get" : {
        "tags" : [ "Policy" ],
        "summary" : "Retrieve an existing access policy, including all it's policy rules. This will eventually be deprecated, so rules should be requested separately. Account Admin role required.",
        "description" : "",
        "operationId" : "getAccessPolicy",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Access policy id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AccessPolicyResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Access Denied"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "Bearer token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Policy" ],
        "summary" : "Update an existing access policy. Account Admin role required.",
        "description" : "",
        "operationId" : "updateAccessPolicy",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Access policy id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AccessPolicyRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AccessPolicyResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Access Denied"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "Bearer token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Policy" ],
        "summary" : "Delete an existing access policy. Account Admin role required.",
        "description" : "",
        "operationId" : "deleteAccessPolicy",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Access policy id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Access Denied"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "Bearer token" : [ ]
        } ]
      }
    },
    "/access/resourcetypes" : {
      "get" : {
        "tags" : [ "Policy" ],
        "summary" : "Access-controlled resource types available.",
        "description" : "",
        "operationId" : "getResourceTypes",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Access Denied"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "Bearer token" : [ ]
        } ]
      }
    },
    "/login" : {
      "post" : {
        "tags" : [ "@Login" ],
        "summary" : "Retrieve an access_token",
        "description" : "The access_token value is used in the Authorization header in the format 'Authorization: Bearer [access_token value]' to make other API calls.",
        "operationId" : "login",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LoginRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Access Token",
            "schema" : {
              "$ref" : "#/definitions/AccessTokenResponse"
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "401" : {
            "description" : "Inactive, Bad Credentials, or Locked Out"
          }
        }
      }
    },
    "/product/info" : {
      "get" : {
        "tags" : [ "@Login" ],
        "summary" : "Retrieve detailed product information",
        "description" : "",
        "operationId" : "getProductInfo",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InstalledProductInfo"
            }
          }
        }
      }
    },
    "/users/access/policies" : {
      "get" : {
        "tags" : [ "Policy Assignment" ],
        "summary" : "Retrieve a list of access policies for all users in the current account. Account Admin role required.",
        "description" : "",
        "operationId" : "getAllUserAccessPolicies",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Page number (zero based)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortby",
          "in" : "query",
          "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterby",
          "in" : "query",
          "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "operators",
          "in" : "query",
          "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AccessPolicyListResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Access Denied"
          }
        },
        "security" : [ {
          "Bearer token" : [ ]
        } ]
      }
    },
    "/users/{userId}/access/policies" : {
      "get" : {
        "tags" : [ "Policy Assignment" ],
        "summary" : "Retrieve a list of access policies currently assigned to a user. Account Admin role required.",
        "description" : "",
        "operationId" : "getUserAccessPolicies",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Page number (zero based)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortby",
          "in" : "query",
          "description" : "A comma delimited list of column names to sort the result set by. These may be specified as child fields, for example createdByUser.name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "A comma delimited list of sort directions (asc or desc) that coincide with the sortby parameters specified",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Comma delimited filter values. Sets of values (for in or !in operations) should be pipe delimited. If only a filter is provided, with no filterBy or operators defined, then like will be used among a set of default columns. All date values should be provided in epoch numerical format",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filterby",
          "in" : "query",
          "description" : "A comma delimited list of property names to run the defined filter operations on. These may be child objects, such as createdByUser.name, and should coincide in order with the operators and filter(s) provided",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "operators",
          "in" : "query",
          "description" : "Filter operations. These may be either comma delimited to specify AND between operators, or pipe delimited to specify OR between operators. Parentheses can be used to specify order of operations. Valid operators include: eq, ne, lt, gt, lte, gte, in, !in, like, !like, null, or !null",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AccessPolicyListResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Access Denied"
          }
        },
        "security" : [ {
          "Bearer token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Policy Assignment" ],
        "summary" : "Assign (one or more) access control policies to a user. Account Admin role required.",
        "description" : "",
        "operationId" : "setUserAccessPolicies",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserAccessPolicyRequest"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/UserAccessPolicyResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Access Denied"
          }
        },
        "security" : [ {
          "Bearer token" : [ ]
        } ]
      }
    },
    "/users/{userId}/access/policies/{accessPolicyId}" : {
      "put" : {
        "tags" : [ "Policy Assignment" ],
        "summary" : "Assign an access policy to a user. Account Admin role required.",
        "description" : "",
        "operationId" : "putUserAccessPolicy",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accessPolicyId",
          "in" : "path",
          "description" : "Access Policy id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/UserAccessPolicyResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Access Denied"
          }
        },
        "security" : [ {
          "Bearer token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Policy Assignment" ],
        "summary" : "Revoke an access policy currently assigned to a user. Account Admin role required.",
        "description" : "",
        "operationId" : "deleteUserAccessPolicy",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accessPolicyId",
          "in" : "path",
          "description" : "Access Policy id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content",
            "schema" : {
              "type" : "object"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Access Denied"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "Bearer token" : [ ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "Bearer token" : {
      "description" : "Enter access_token value from Login. Use format 'Bearer [access_token value]'.",
      "type" : "apiKey",
      "name" : "authorization",
      "in" : "header"
    }
  },
  "definitions" : {
    "AccessPolicyListResponse" : {
      "type" : "object",
      "properties" : {
        "totalRecords" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sortBy" : {
          "type" : "string"
        },
        "direction" : {
          "type" : "string"
        },
        "filter" : {
          "$ref" : "#/definitions/FilterRequest"
        },
        "warnings" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AccessPolicyResponse"
          }
        },
        "links" : {
          "$ref" : "#/definitions/ListLink"
        },
        "filterRequest" : {
          "$ref" : "#/definitions/FilterRequest"
        }
      }
    },
    "AccessPolicyRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "permissions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Permission"
          }
        }
      }
    },
    "AccessPolicyResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "href" : {
          "type" : "string"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "createdByUser" : {
          "$ref" : "#/definitions/Reference"
        },
        "lastModified" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastModifiedByUser" : {
          "$ref" : "#/definitions/Reference"
        },
        "allowed" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string"
        },
        "global" : {
          "type" : "boolean"
        },
        "permissions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Permission"
          }
        }
      }
    },
    "AccessTokenResponse" : {
      "type" : "object",
      "properties" : {
        "access_token" : {
          "type" : "string"
        },
        "token_type" : {
          "type" : "string"
        },
        "expires_in" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "FilterRequest" : {
      "type" : "object",
      "properties" : {
        "and" : {
          "type" : "boolean",
          "example" : true
        },
        "or" : {
          "type" : "boolean",
          "example" : false
        },
        "filters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OperationRequest"
          }
        },
        "subfilters" : {
          "type" : "array",
          "example" : "[{\"and\":true,\"operations\":\"More filters can go here (recursive)\"}]",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "InstalledProductInfo" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "copyright" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "buildDate" : {
          "type" : "string"
        }
      }
    },
    "ListLink" : {
      "type" : "object",
      "properties" : {
        "prev" : {
          "type" : "string"
        },
        "next" : {
          "type" : "string"
        }
      }
    },
    "LoginRequest" : {
      "type" : "object",
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        }
      }
    },
    "OperationRequest" : {
      "type" : "object",
      "required" : [ "operator" ],
      "properties" : {
        "fieldName" : {
          "type" : "string",
          "example" : "id"
        },
        "object" : {
          "type" : "string",
          "example" : "jobConfig"
        },
        "operator" : {
          "type" : "string",
          "example" : "=",
          "enum" : [ "\"=\"", "\"eq\"", "\"!=\"", "\"ne\"", "\"<\"", "\"lt\"", "\"<=\"", "\"lte\"", "\">\"", "\"gt\"", "\">=\"", "\"gte\"", "\"subquery\"", "\"in\"", "\"!in\"", "\"null\"", "\"!null\"", "\"contains\"", "\"!contains\"", "\"none\"" ]
        },
        "value" : {
          "type" : "object",
          "example" : "value"
        },
        "values" : {
          "type" : "array",
          "example" : "[1,2]",
          "uniqueItems" : true,
          "items" : {
            "type" : "object"
          }
        },
        "in" : {
          "$ref" : "#/definitions/FilterRequest"
        },
        "date" : {
          "type" : "string"
        }
      }
    },
    "Permission" : {
      "type" : "object",
      "properties" : {
        "resourceType" : {
          "type" : "string"
        },
        "allowed" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "resourceIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Reference" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "href" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        }
      }
    },
    "UserAccessPolicyListResponse" : {
      "type" : "object",
      "properties" : {
        "totalRecords" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sortBy" : {
          "type" : "string"
        },
        "direction" : {
          "type" : "string"
        },
        "filter" : {
          "$ref" : "#/definitions/FilterRequest"
        },
        "warnings" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserAccessPolicyResponse"
          }
        },
        "links" : {
          "$ref" : "#/definitions/ListLink"
        },
        "filterRequest" : {
          "$ref" : "#/definitions/FilterRequest"
        }
      }
    },
    "UserAccessPolicyRequest" : {
      "type" : "object",
      "properties" : {
        "accessPolicyIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "UserAccessPolicyResponse" : {
      "type" : "object",
      "properties" : {
        "userId" : {
          "type" : "string"
        },
        "userName" : {
          "type" : "string"
        },
        "accessPolicies" : {
          "$ref" : "#/definitions/AccessPolicyListResponse"
        }
      }
    }
  }
}